using System;
using System.IO;
using System.Linq.Expressions;
using System.Text;

using BLToolkit.Linq;

namespace BLToolkit.Data.Linq.Builder
{
	class TestSourceGenerator
	{
		readonly StringBuilder _exprBuilder = new StringBuilder();

		string _indent = "\t\t\t\t";

		void PushIndent() { _indent += '\t'; }
		void PopIndent () { _indent = _indent.Substring(1); }

		bool BuildExpression(Expression expr)
		{
			switch (expr.NodeType)
			{
				case ExpressionType.Call :
					_exprBuilder
						.AppendLine()
						.Append(_indent);

					var ex = (MethodCallExpression)expr;
					var mi = ex.Method;

					_exprBuilder.Append("Expression.Call(");

					//Expression.Call();

					PushIndent();

					if (ex.Object != null)
					{
						_exprBuilder.AppendLine();
						ex.Visit(new Func<Expression,bool>(BuildExpression));
						_exprBuilder.Append(",");
					}

					_exprBuilder
						.AppendLine()
						.Append(_indent)
						.Append('"')
						.Append(mi.Name)
						.Append('"')
						.Append(",")
						;

					if (mi.IsGenericMethod)
					{
						_exprBuilder
							.AppendLine()
							.Append    (_indent)
							.AppendLine("new Type[]")
							.Append    (_indent)
							.AppendLine("{")
							;

						PushIndent();

						var args = mi.GetGenericArguments();

						foreach (var type in args)
						{
							_exprBuilder
								.Append(_indent)
								.Append("typeof(")
								.Append(type.FullName)
								.AppendLine("),")
								;
						}

						PopIndent();

						_exprBuilder
							.Append(_indent)
							.Append("},")
							;
					}

					/*
						_exprBuilder
							.AppendLine()
							.Append    (_indent)
							.AppendLine("new Type[]")
							.Append    (_indent)
							.AppendLine("{")
							;

						PushIndent();

						var args = mi.GetGenericArguments();

						foreach (var type in args)
						{
							_exprBuilder
								.Append(_indent)
								.Append("typeof(")
								.Append(type.FullName)
								.AppendLine("),")
								;
						}

						PopIndent();

						_exprBuilder
							.Append    (_indent)
							.AppendLine("},")
							;
					*/

					_exprBuilder.Append(")");

					PopIndent();

					return false;

				default:
					throw new InvalidOperationException();
			}

			return true;
		}

		public string GenerateSource(Expression expr)
		{
			var dir = Path.Combine(Path.GetTempPath(), "bltookit\\");

			if (!Directory.Exists(dir))
				Directory.CreateDirectory(dir);

			var fileName = Path.Combine(dir, "Path.GetRandomFileName()" + ".cs");

			expr.Visit(new Func<Expression,bool>(BuildExpression));

			using (var sw = File.CreateText(fileName))
			{
				sw.WriteLine(string.Format(@"//---------------------------------------------------------------------------------------------------
// This code was generated by BLToolkit.
//---------------------------------------------------------------------------------------------------
using System;
using System.Linq.Expressions;

using NUnit.Framework;

namespace Data.Linq
{{
	[TestFixture]
	public class UserTest : TestBase
	{{
		[Test]
		public void Test()
		{{
			ForEachProvider(db =>{0});
		}}
	}}
}}
",
					_exprBuilder));
			}
			return fileName;
		}
	}
}
